Dumistracel Eduard-Costin 334CA

Procesarea fisierelor:
    ->am dat primului thread primul fisier, celui de al doilea thread
    al doilea fisier si tot asa pana se epuizeaza thread-urile. In cazul
    in care mai raman fisiere neprocesate, primul thread liber ia primul
    fiser neprocesat.
    -> fiserele sunt stocate intr-un queue pe care il dam fiecarui
    thread cu ajutorul unei structuri care contine adresa acestuia, id,
    adresa barierei si a mutexului, numarul de reduce-uri, adresa rezultatului
    -> ca sa nu se apeleze in acelasi timp verificarea daca mai sunt
    fisiere neprocesate am folosit un mutex
puteri numere:
    ->am realizat o functie de binary search care cauta baza unei puteri
    care sa dea numarul dorit. In cazul in care se gaseste, se stocheaza
    intr-un vector de seturi la pozitia care trebuie(daca puterea este 2,
    numarul se insereaza pe primul set din vector)
valorile unice
    -> am folosit set ca sa nu se puna elemente duplicate si la final
    verificam dimensiunea fiecarui set din vector

Fisiere:
    tema1.cpp
    process.cpp
    utils.h
    utils.cpp

tema1.cpp
    -> realizez citirea fisierului de input si datele din acesta
    -> initializez clasa Map_data cu ajutorul unui constructor
process.cpp
    -> am realizat o clasa care are campuri numarul de map-uri, numarul de
    reduce si un constructor pentru aceasta clasa
    ->in functia run() se realizeaza crearea pthread-urilor ce reduce si map
    si join-ul acestora
utils.cpp
    ->am realizat functie de cautare binara pentru a afla ce numere sunt puteri
    ale altor numere
    ->reduce_f() - realizeaza scrierea in fisier a numarului ce semnifica cate
    valori unice se afla in lista
    -> mapper_f - verifica daca toate fisierele au  fost citite si daca nu
    realizeaza procesarea fisierului